From 3af585e3bf9841d3dae6de8f3acc1a24f9e368f1 Mon Sep 17 00:00:00 2001
From: youcai <omegacoleman@gmail.com>
Date: Fri, 3 May 2024 17:53:17 +0800
Subject: [PATCH 1/2] dbusmodule: add signals to reflect InputContext focus
 change and InputMethod switching

Added three new dbus signals for org.fcitx.Fcitx.Controller1:

* InputContextFocusIn
* InputContextFocusOut
* InputContextSwitchInputMethod

each was triggered when the EventType with same name fires
---
 src/modules/dbus/dbusmodule.cpp | 49 ++++++++++++++++++++++++++++++++-
 1 file changed, 48 insertions(+), 1 deletion(-)

diff --git a/src/modules/dbus/dbusmodule.cpp b/src/modules/dbus/dbusmodule.cpp
index 5ec92dd6..66212219 100644
--- a/src/modules/dbus/dbusmodule.cpp
+++ b/src/modules/dbus/dbusmodule.cpp
@@ -129,7 +129,43 @@ std::string X11GetAddress(AddonInstance *xcb, const std::string &display,
 class Controller1 : public ObjectVTable<Controller1> {
 public:
     Controller1(DBusModule *module, Instance *instance)
-        : module_(module), instance_(instance) {}
+        : module_(module), instance_(instance) {
+          eventWatchers_.emplace_back(
+              instance_->watchEvent(EventType::InputContextFocusIn,
+              EventWatcherPhase::PostInputMethod, [this](Event &event) {
+                  auto &icEvent = static_cast<InputContextEvent &>(event);
+                  const auto* ic = icEvent.inputContext();
+                  std::ostringstream ss;
+                  for (auto v : ic->uuid()) {
+                      ss << fmt::format("{:02x}", static_cast<int>(v));
+                  }
+                  this->inputContextFocusIn(ss.str(), ic->program(), ic->frontendName());
+              }));
+          eventWatchers_.emplace_back(
+              instance_->watchEvent(EventType::InputContextFocusOut,
+              EventWatcherPhase::PostInputMethod, [this](Event &event) {
+                  auto &icEvent = static_cast<InputContextEvent &>(event);
+                  const auto* ic = icEvent.inputContext();
+                  std::ostringstream ss;
+                  for (auto v : ic->uuid()) {
+                      ss << fmt::format("{:02x}", static_cast<int>(v));
+                  }
+                  this->inputContextFocusOut(ss.str(), ic->program(), ic->frontendName());
+              }));
+          eventWatchers_.emplace_back(
+              instance_->watchEvent(EventType::InputContextSwitchInputMethod,
+              EventWatcherPhase::PostInputMethod, [this](Event &event) {
+                  auto &icEvent = static_cast<InputContextEvent &>(event);
+                  auto* ic = icEvent.inputContext();
+                  std::ostringstream ss;
+                  for (auto v : ic->uuid()) {
+                      ss << fmt::format("{:02x}", static_cast<int>(v));
+                  }
+                  this->inputContextSwitchInputMethod(
+                      ss.str(), ic->program(), ic->frontendName(),
+                      instance_->inputMethod(ic));
+              }));
+    }
 
     void exit() { instance_->exit(); }
 
@@ -685,10 +721,21 @@ private:
     DBusModule *module_;
     Instance *instance_;
     std::unique_ptr<EventSource> deferEvent_;
+    std::vector<std::unique_ptr<HandlerTableEntry<EventHandler>>>
+        eventWatchers_;
 
     FCITX_OBJECT_VTABLE_SIGNAL(inputMethodGroupChanged,
                                "InputMethodGroupsChanged", "");
 
+    FCITX_OBJECT_VTABLE_SIGNAL(inputContextFocusIn,
+                               "InputContextFocusIn", "sss");
+
+    FCITX_OBJECT_VTABLE_SIGNAL(inputContextFocusOut,
+                               "InputContextFocusOut", "sss");
+
+    FCITX_OBJECT_VTABLE_SIGNAL(inputContextSwitchInputMethod,
+                               "InputContextSwitchInputMethod", "ssss");
+
     FCITX_OBJECT_VTABLE_METHOD(availableKeyboardLayouts,
                                "AvailableKeyboardLayouts", "",
                                "a(ssasa(ssas))");
-- 
2.43.2

